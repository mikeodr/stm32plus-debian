Index: stm32plus-4.0.3/lib/include/timing/MillisecondTimer.h
===================================================================
--- stm32plus-4.0.3.orig/lib/include/timing/MillisecondTimer.h	2015-10-31 06:15:26.000000000 -0400
+++ stm32plus-4.0.3/lib/include/timing/MillisecondTimer.h	2016-03-24 16:13:24.113259149 -0400
@@ -24,7 +24,7 @@
 
     public:
       static void initialise();
-      static void delay(uint32_t millis_);
+      static void __attribute__ ((weak)) delay(uint32_t millis_);
       static uint32_t millis();
       static void reset();
       static bool hasTimedOut(uint32_t start,uint32_t timeout);
@@ -42,20 +42,6 @@
   }
 
 
-  /**
-   * Delay for given time. Waits for the current value of the systick counter to reach a target.
-   * @param millis The amount of time to wait.
-   */
-
-  inline void MillisecondTimer::delay(uint32_t millis) {
-
-    uint32_t target;
-
-    target=_counter+millis;
-    while(_counter<target);
-  }
-
-
   /**
    * Reset the counter to zero
    */
Index: stm32plus-4.0.3/lib/src/timing/MillisecondTimer.cpp
===================================================================
--- stm32plus-4.0.3.orig/lib/src/timing/MillisecondTimer.cpp	2015-10-31 06:15:26.000000000 -0400
+++ stm32plus-4.0.3/lib/src/timing/MillisecondTimer.cpp	2016-03-24 16:13:40.529094351 -0400
@@ -23,6 +23,20 @@
     _counter=0;
     SysTick_Config(SystemCoreClock / 1000);
   }
+
+
+  /**
+   * Delay for given time. Waits for the current value of the systick counter to reach a target.
+   * @param millis The amount of time to wait.
+   */
+
+  inline void MillisecondTimer::delay(uint32_t millis) {
+
+    uint32_t target;
+
+    target=_counter+millis;
+    while(_counter<target);
+  }
 }
 
 
